<?php

use Drupal\Core\Config\FileStorage;


/**
 * Update the paragraphs to classical ones.
 */
function webspark_blocks_update_9001(&$sandbox) {
  // Contains config names on the first level, key and value of the config for
  // level 2 and 3.
  $config_updates = [
      'core.entity_form_display.block_content.gallery.default' => [
          'content' => [
              'field_carousel_card' => ['type', 'settings']
          ]
      ],
      'core.entity_form_display.block_content.card_and_image.default' => [
          'content' => [
              'field_anchor_menu_settings' => ['type', 'settings']
          ]
      ],
      'core.entity_form_display.block_content.card_image_and_content.default' => [
          'content' => [
              'field_anchor_menu_settings' => ['type', 'settings']
          ]
      ],
      'core.entity_form_display.block_content.carousel_image.default' => [
          'content' => [
              'field_carousel_card' => ['type', 'settings']
          ]
      ],
      'core.entity_form_display.block_content.content_image.default' => [
          'content' => [
              'field_anchor_menu_settings' => ['type', 'settings']
          ]
      ],
      'core.entity_form_display.block_content.gallery.default' => [
          'content' => [
              'field_carousel_card' => ['type', 'settings']
          ]
      ],
      'core.entity_form_display.block_content.hero.default' => [
          'content' => [
              'field_two_cta' => ['type', 'settings']
          ]
      ],
      'core.entity_form_display.block_content.video_hero.default' => [
        'content' => [
          'field_two_cta' => ['type', 'settings']
        ]
      ],
      'core.entity_form_display.paragraph.card_media.default' => [
          'content' => [
              'field_cta' => ['type', 'settings'],
              'field_cta_secondary' => ['type', 'settings']
          ],
      ],

  ];

  _webspark_blocks_update_config($config_updates);
  return 'Updated the paragraph config.';
}

/**
 * Update the card format text.
 */
function webspark_blocks_update_9002(&$sandbox) {
  // Contains config names on the first level, key and value of the config for
  // level 2 and 3.
  $config_updates = [
      'editor.editor.minimal_format' => [],
      'filter.format.minimal_format' => [],
      'field.field.block_content.card_arrangement.field_formatted_text' => [
          'third_party_settings' => [
              'allowed_formats'
          ]
      ],
      'field.field.block_content.card_image_and_content.field_formatted_text' => [
          'third_party_settings' => [
              'allowed_formats'
          ]
      ],
      'field.field.paragraph.card.field_body' => [
          'third_party_settings' => [
              'allowed_formats'
          ]
      ],
      'field.field.paragraph.card_degree.field_body' => [
          'third_party_settings' => [
              'allowed_formats'
          ]
      ],
      'field.field.paragraph.card_event.field_body' => [
          'third_party_settings' => [
              'allowed_formats'
          ]
      ],
      'field.field.paragraph.card_media.field_formatted_text' => [
          'dependencies' => [
              'module'
          ],
           'third_party_settings' => [
              'allowed_formats'
          ]
      ],
      'field.field.paragraph.card_story.field_body' => [
        'third_party_settings' => [
              'allowed_formats'
          ]
      ],
      'field.field.paragraph.card_with_icon.field_body' => [
          'third_party_settings' => [
              'allowed_formats'
          ]
      ],
      'field.field.paragraph.gallery_image.field_formatted_text' => [
          'third_party_settings' => [
              'allowed_formats'
          ]
      ],
  ];

  _webspark_blocks_update_config($config_updates);
  return 'Updated the paragraph config.';
}

/**
 * Helper function to update a config with the values
 */
function _webspark_blocks_update_config($config_updates) {
  $config_path    = drupal_get_path('module', 'webspark_blocks') . '/config/install';
  $source         = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_factory = \Drupal::configFactory();
  $uuid_service = \Drupal::service('uuid');

  foreach ($config_updates as $name => $config_update) {
    $config_data = $source->read($name);
    // If the file is new copy the whole file.
    if (!is_array($config_update) || empty($config_update)) {
      $config_storage->write($name, $config_data);
      continue;
    }
    foreach ($config_update as $key => $value) {
      if (is_array($value)) {
        foreach ($value as $sub_key => $sub_value) {
          if (is_array($sub_value)) {
            foreach ($sub_value as $field_settings_key => $field_setting) {
              $config_factory->getEditable($name)->set("$key.$sub_key.$field_setting", $config_data[$key][$sub_key][$field_setting])->save();
            }
          }
          else {
            $config_factory->getEditable($name)->set("$key.$sub_value", $config_data[$key][$sub_value])->save();
          }
        }
      }
      else {
        $config_factory->getEditable($name)->set("$value", $config_data[$key][$value])->save();
      }
    }
  }
}

/**
 * Implements hook_update_N().
 * Revert all configurations from this module.
 */
function webspark_blocks_update_9003(&$sandbox) {
  // Get this module name.
  $module = \Drupal::service('module_handler')
      ->getModule(basename(__FILE__, '.install'))
      ->getName();
  
  // Unlock the configuration storage.
  \Drupal::state()->set('configuration_locked', FALSE);
  // Revert all configs from this module.
  webspark_uitlity_revert_all($module);
  // Lock the configuration storage.
  \Drupal::state()->set('configuration_locked', TRUE);
}